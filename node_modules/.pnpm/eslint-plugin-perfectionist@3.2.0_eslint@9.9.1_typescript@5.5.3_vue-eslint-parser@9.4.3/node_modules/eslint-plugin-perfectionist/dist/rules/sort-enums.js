'use strict'
const isPartitionComment = require('../utils/is-partition-comment.js')
const createEslintRule = require('../utils/create-eslint-rule.js')
const getCommentBefore = require('../utils/get-comment-before.js')
const getSourceCode = require('../utils/get-source-code.js')
const toSingleLine = require('../utils/to-single-line.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const getSettings = require('../utils/get-settings.js')
const isPositive = require('../utils/is-positive.js')
const sortNodes = require('../utils/sort-nodes.js')
const makeFixes = require('../utils/make-fixes.js')
const complete = require('../utils/complete.js')
const pairwise = require('../utils/pairwise.js')
const compare = require('../utils/compare.js')
const sortEnums = createEslintRule.createEslintRule({
  name: 'sort-enums',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted TypeScript enums.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
          sortByValue: {
            description: 'Compare enum values instead of names.',
            type: 'boolean',
          },
          forceNumericSort: {
            description:
              'Will always sort numeric enums by their value regardless of the sort type specified.',
            type: 'boolean',
          },
          partitionByComment: {
            description:
              'Allows you to use comments to separate the class members into logical groups.',
            anyOf: [
              {
                type: 'array',
                items: {
                  type: 'string',
                },
              },
              {
                type: 'boolean',
              },
              {
                type: 'string',
              },
            ],
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedEnumsOrder: 'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
      sortByValue: false,
      partitionByComment: false,
      forceNumericSort: false,
    },
  ],
  create: context => ({
    TSEnumDeclaration: node => {
      let getMembers = nodeValue => {
        var _a
        return (
          /* v8 ignore next 2 */
          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
          ((_a = node.body) == null ? void 0 : _a.members) ??
          nodeValue.members ??
          []
        )
      }
      let members = getMembers(node)
      if (
        members.length > 1 &&
        members.every(({ initializer }) => initializer)
      ) {
        let settings = getSettings.getSettings(context.settings)
        let options = complete.complete(context.options.at(0), settings, {
          partitionByComment: false,
          type: 'alphabetical',
          ignoreCase: true,
          order: 'asc',
          sortByValue: false,
          forceNumericSort: false,
        })
        let sourceCode = getSourceCode.getSourceCode(context)
        let partitionComment = options.partitionByComment
        let formattedMembers = members.reduce(
          (accumulator, member) => {
            let comment = getCommentBefore.getCommentBefore(member, sourceCode)
            if (
              partitionComment &&
              comment &&
              isPartitionComment.isPartitionComment(
                partitionComment,
                comment.value,
              )
            ) {
              accumulator.push([])
            }
            let name =
              member.id.type === 'Literal'
                ? `${member.id.value}`
                : `${sourceCode.text.slice(...member.id.range)}`
            let sortingNode = {
              size: rangeToDiff.rangeToDiff(member.range),
              node: member,
              name,
            }
            accumulator.at(-1).push(sortingNode)
            return accumulator
          },
          [[]],
        )
        let isNumericEnum = members.every(member => {
          var _a
          return (
            ((_a = member.initializer) == null ? void 0 : _a.type) ===
              'Literal' && typeof member.initializer.value === 'number'
          )
        })
        let compareOptions = {
          // If the enum is numeric, and we sort by value, always use the `natural` sort type, which will correctly sort them.
          type:
            isNumericEnum && (options.forceNumericSort || options.sortByValue)
              ? 'natural'
              : options.type,
          order: options.order,
          ignoreCase: options.ignoreCase,
          // Get the enum value rather than the name if needed
          nodeValueGetter:
            options.sortByValue || (isNumericEnum && options.forceNumericSort)
              ? sortingNode => {
                  var _a, _b
                  if (
                    sortingNode.node.type === 'TSEnumMember' &&
                    ((_a = sortingNode.node.initializer) == null
                      ? void 0
                      : _a.type) === 'Literal'
                  ) {
                    return (
                      ((_b = sortingNode.node.initializer.value) == null
                        ? void 0
                        : _b.toString()) ?? ''
                    )
                  }
                  return ''
                }
              : void 0,
        }
        for (let nodes of formattedMembers) {
          pairwise.pairwise(nodes, (left, right) => {
            if (
              isPositive.isPositive(
                compare.compare(left, right, compareOptions),
              )
            ) {
              context.report({
                messageId: 'unexpectedEnumsOrder',
                data: {
                  left: toSingleLine.toSingleLine(left.name),
                  right: toSingleLine.toSingleLine(right.name),
                },
                node: right.node,
                fix: fixer =>
                  makeFixes.makeFixes(
                    fixer,
                    nodes,
                    sortNodes.sortNodes(nodes, compareOptions),
                    sourceCode,
                    { partitionComment },
                  ),
              })
            }
          })
        }
      }
    },
  }),
})
module.exports = sortEnums
