type Deferred<T = void> = Promise<T> & {
    resolve: (value: T) => void;
    reject: (value?: any) => void;
};
declare function createDeferred<T = void>(): Deferred<T>;

interface GlobalMountOptions {
    /**
     * mount container element id
     *
     * @default 'unified-overlay-provider'
     */
    id?: string;
    /**
     * enable mount container element id auto increment
     *
     * @default true
     */
    autoIncrement?: boolean;
    /**
     * the dom node to mount at render time
     *
     * @default document.body
     */
    root?: HTMLElement | false | null;
    /** only overlay */
    only?: boolean;
}
interface ImperativeOverlay<Props, Resolved, Opts = {}> {
    (props?: Props, options?: MountOptions<Opts>): Deferred<Resolved>;
}
type MountOptions<Opts = {}> = GlobalMountOptions & Opts;
interface ClickPosition {
    x: number;
    y: number;
}

type MountConstructorOptions<Options> = Options & {
    /**
     * The ID of the mounted element
     */
    id: string;
    /**
     * The current element level defaults to 0 if autoIncrement is not started
     */
    index: number;
    /**
     * mount elements, do not mount when root is false
     */
    container: HTMLDivElement;
    /**
     * Promise, used to mark the completion and end of an instance
     */
    deferred: Deferred;
    /**
     * Mouse position during triggering
     */
    position?: ClickPosition;
};
interface MountConstructor<Instance, Options> {
    (instance: Instance, props: any, options: MountConstructorOptions<Options>): void;
}
interface OverlaysConstructor<Instance, Options> {
    define: <Props, Resolved = void>(instance: Instance, options?: MountOptions<Options>) => ImperativeOverlay<Props, Resolved, Options>;
    render: <Props, Resolved = void>(instance: Instance, props?: Props, options?: MountOptions<Options>) => Promise<Resolved>;
}
/**
 * Create a overlays constructor
 * @param mount Trigger Mount
 * @example
 * const constructor = createConstructor<HTMLDivElement, { class: any }>((inst, props, options) => {
 *  const { deferred, container } = options
 *  inst.querySelector('button.confirm').onclick = function () {
 *    deferred.resolve('ok')
 *    container.remove()
 *  }
 *  inst.querySelector('button.close').onclick = function () {
 *    deferred.reject('close')
 *    container.remove()
 *  }
 *  inst.dataset['props'] = JSON.stringify(props)
 *  container.append(inst)
 * })
 */
declare function createConstructor<Inst, Opts = {}>(mount: MountConstructor<Inst, Opts>): OverlaysConstructor<Inst, Opts>;

declare function noop(): void;
declare function allowed(): void;
declare function delay(milliseconds?: number): Promise<unknown>;

declare const UnifiedOverlayProviderID = "unified-overlay";
declare function defineGlobalElement(id?: string, root?: HTMLElement | false): HTMLDivElement;

declare function defineName(id?: string, auto?: boolean): string;
declare function getIndex(id?: string): number;

export { type ClickPosition, type Deferred, type GlobalMountOptions, type ImperativeOverlay, type MountConstructor, type MountConstructorOptions, type MountOptions, type OverlaysConstructor, UnifiedOverlayProviderID, allowed, createConstructor, createDeferred, defineGlobalElement, defineName, delay, getIndex, noop };
