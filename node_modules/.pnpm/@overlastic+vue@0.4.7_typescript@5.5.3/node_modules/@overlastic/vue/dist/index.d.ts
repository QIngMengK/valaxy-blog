import * as vue_demi from 'vue-demi';
import { Ref, Component, AppContext, PropType, VNode, App } from 'vue-demi';
import * as _overlastic_core from '@overlastic/core';
import { Deferred, ImperativeOverlay, GlobalMountOptions } from '@overlastic/core';
import * as vue from 'vue';
import { DefineComponent, Component as Component$1 } from 'vue';

interface PromptifyEvents {
    /**
     * reject event name used by the template
     *
     * @default 'reject'
     */
    reject?: string;
    /**
     * resolve event name used by the template
     *
     * @default 'resolve'
     */
    resolve?: string;
}
interface ProgramsOptions {
    /** animation duration to avoid premature destruction of components */
    duration?: number;
    /** whether to set visible to true immediately */
    immediate?: boolean;
    /**
     * v-model fields used by template
     *
     * @default 'visible'
     */
    model?: string;
    /**
     * template use event name
     */
    events?: PromptifyEvents;
    /**
     * whether to automatically handle components based on visible and duration
     *
     * @default true
     */
    automatic?: boolean;
}
interface ProgramsReturn {
    /** the notification reject, modify visible, and destroy it after the duration ends */
    reject: Function;
    /** the notification resolve, modify visible, and destroy it after the duration ends */
    resolve: Function;
    /** destroy the current instance (immediately) */
    vanish: Function;
    /** visible control popup display and hide */
    visible: Ref<boolean>;
    /** current deferred */
    deferred?: Deferred<any>;
}
/**
 * get overlay layer meta information
 * @function reject  the notification reject, modify visible, and destroy it after the duration ends
 * @function resolve the notification resolve, modify visible, and destroy it after the duration ends
 * @function vanish destroy the current instance (immediately)
 * @field visible control overlay display and hide
 * @returns
 */
declare function usePrograms(options?: ProgramsOptions): ProgramsReturn;

type InjectionHolder<Props, Resolved> = [Component, ImperativeOverlay<Props, Resolved>];
declare function useOverlayHolder<Props, Resolved = void>(component: Component, options?: Omit<GlobalMountOptions, 'appContext'>): InjectionHolder<Props, Resolved>;

interface Options {
    render: (instance: Component$1, props: any) => void;
    vanish: (instance: Component$1) => void;
}
declare function useOverlay<Props, Resolved>(Instance: DefineComponent<Props>): _overlastic_core.ImperativeOverlay<Props, Resolved, Options>;

interface VMountOptions {
    /** current app context */
    appContext?: AppContext;
}

declare const defineOverlay: <Props, Resolved = void>(instance: vue.Component, options?: _overlastic_core.MountOptions<VMountOptions> | undefined) => _overlastic_core.ImperativeOverlay<Props, Resolved, VMountOptions>;
declare const renderOverlay: <Props, Resolved = void>(instance: vue.Component, props?: Props | undefined, options?: _overlastic_core.MountOptions<VMountOptions> | undefined) => Promise<Resolved>;

declare const Provider: Component;
declare const Field: vue_demi.DefineComponent<{
    is: {
        type: PropType<string | number | VNode<vue_demi.RendererNode, vue_demi.RendererElement, {
            [key: string]: any;
        }> | Component>;
        default: string;
    };
}, () => string | number | VNode<vue_demi.RendererNode, vue_demi.RendererElement, {
    [key: string]: any;
}> | null, unknown, {}, {}, vue_demi.ComponentOptionsMixin, vue_demi.ComponentOptionsMixin, {}, string, vue_demi.VNodeProps & vue_demi.AllowedComponentProps & vue_demi.ComponentCustomProps, Readonly<vue_demi.ExtractPropTypes<{
    is: {
        type: PropType<string | number | VNode<vue_demi.RendererNode, vue_demi.RendererElement, {
            [key: string]: any;
        }> | Component>;
        default: string;
    };
}>>, {
    is: string | number | VNode<vue_demi.RendererNode, vue_demi.RendererElement, {
        [key: string]: any;
    }> | Component;
}, {}>;
declare const OverlaysProvider: vue_demi.DefineComponent<{}, () => VNode<vue_demi.RendererNode, vue_demi.RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, vue_demi.ComponentOptionsMixin, vue_demi.ComponentOptionsMixin, {}, string, vue_demi.VNodeProps & vue_demi.AllowedComponentProps & vue_demi.ComponentCustomProps, Readonly<vue_demi.ExtractPropTypes<{}>>, {}, {}>;

declare function install(app: App): void;
declare const unoverlay: {
    install: typeof install;
};

export { Field, type InjectionHolder, OverlaysProvider, type ProgramsOptions, type ProgramsReturn, Provider, unoverlay as default, defineOverlay, install, renderOverlay, useOverlay, useOverlayHolder, usePrograms };
