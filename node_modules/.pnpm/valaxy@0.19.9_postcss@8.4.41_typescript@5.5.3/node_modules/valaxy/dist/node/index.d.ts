import { ViteSSGOptions } from 'vite-ssg';
export { cli, run } from './cli/index.js';
import * as vite from 'vite';
import { UserConfig, InlineConfig, Plugin, PluginOption } from 'vite';
import * as valaxy_types from 'valaxy/types';
import { SiteConfig, DefaultTheme, ValaxyConfig, PartialDeep, ValaxyAddon, RuntimeConfig, RedirectItem, UserSiteConfig } from 'valaxy/types';
import { MarkdownEnv } from 'unplugin-vue-markdown/types';
import Vue from '@vitejs/plugin-vue';
import Components from 'unplugin-vue-components/vite';
import Layouts from 'vite-plugin-vue-layouts';
import Markdown from 'unplugin-vue-markdown/vite';
import Router from 'unplugin-vue-router/vite';
import { VitePluginConfig } from 'unocss/vite';
import { EditableTreeNode } from 'unplugin-vue-router';
import { presetUno, presetAttributify, presetIcons, presetTypography } from 'unocss';
import { Hookable } from 'hookable';
import MarkdownIt from 'markdown-it';
import { LanguageInput, ShikiTransformer, Highlighter, ThemeRegistration, BuiltinTheme } from 'shiki';
import anchorPlugin from 'markdown-it-anchor';
import { KatexOptions } from 'katex';
import { HeadersPluginOptions } from '@mdit-vue/plugin-headers';
import { SfcPluginOptions } from '@mdit-vue/plugin-sfc';
import { TocPluginOptions } from '@mdit-vue/plugin-toc';
import { Awaitable } from '@antfu/utils';
import * as defu from 'defu';
import { P as PartialDeep$1 } from '../config-_Vh4V6Lh.js';
import 'yargs';
import 'medium-zoom';
import '@vueuse/integrations/useFuse';
import 'vanilla-lazyload';
import 'vue-router';
import '@vueuse/core';
import '@unhead/schema-org';

declare module 'vite' {
    interface UserConfig {
        ssgOptions?: ViteSSGOptions;
    }
}

interface Options {
    hasSingleTheme: boolean;
    theme: ThemeOptions;
    siteConfig?: SiteConfig;
}

interface BlockItem {
    text?: string;
    icon?: string;
    color?: string;
    /**
     * for i18n
     */
    langs?: {
        [key: string]: string;
    };
}
interface Blocks {
    tip?: BlockItem;
    warning?: BlockItem;
    danger?: BlockItem;
    info?: BlockItem;
    details?: BlockItem;
}
type ContainerOptions = Blocks & Partial<Options>;

type ThemeOptions = ThemeRegistration | BuiltinTheme | {
    light: ThemeRegistration | BuiltinTheme;
    dark: ThemeRegistration | BuiltinTheme;
};
/**
 * Extend Markdown options
 * @zh 扩展 Markdown 配置，包含代码高亮、Markdown-it 和插件配置
 */
interface MarkdownOptions {
    /**
     * Setup markdown-it instance before applying plugins
     */
    preConfig?: (md: MarkdownIt) => void;
    /**
     * markdown-it options
     */
    options?: MarkdownIt['options'];
    /**
     * config markdown-it
     */
    config?: (md: MarkdownIt) => void;
    anchor?: anchorPlugin.AnchorOptions;
    attrs?: {
        leftDelimiter?: string;
        rightDelimiter?: string;
        allowedAttributes?: string[];
        disable?: boolean;
    };
    /**
     * Custom theme for syntax highlighting.
     *
     * You can also pass an object with `light` and `dark` themes to support dual themes.
     *
     * @example { theme: 'github-dark' }
     * @example { theme: { light: 'github-light', dark: 'github-dark' } }
     *
     * You can use an existing theme.
     * @see https://shiki.style/themes
     * Or add your own theme.
     * @see https://shiki.style/guide/load-theme
     */
    theme?: ThemeOptions;
    /**
     * Languages for syntax highlighting.
     * @see https://shiki.style/languages
     */
    languages?: LanguageInput[];
    /**
     * Custom language aliases.
     *
     * @example { 'my-lang': 'js' }
     * @see https://shiki.style/guide/load-lang#custom-language-aliases
     */
    languageAlias?: Record<string, string>;
    /**
     * Show line numbers in code blocks
     * @default false
     */
    lineNumbers?: boolean;
    /**
     * Fallback language when the specified language is not available.
     */
    defaultHighlightLang?: string;
    /**
     * Transformers applied to code blocks
     * @see https://shiki.style/guide/transformers
     */
    codeTransformers?: ShikiTransformer[];
    /**
     * Setup Shiki instance
     */
    shikiSetup?: (shiki: Highlighter) => void | Promise<void>;
    /**
     * Options for `@mdit-vue/plugin-headers`
     * @see https://github.com/mdit-vue/mdit-vue/tree/main/packages/plugin-headers
     */
    headers?: HeadersPluginOptions | boolean;
    /**
     * Options for `@mdit-vue/plugin-sfc`
     * @see https://github.com/mdit-vue/mdit-vue/tree/main/packages/plugin-sfc
     */
    sfc?: SfcPluginOptions;
    /**
     * Options for `@mdit-vue/plugin-toc`
     * @see https://github.com/mdit-vue/mdit-vue/tree/main/packages/plugin-toc
     */
    toc?: TocPluginOptions;
    /**
     * Options for `markdown-it-container`
     * @see https://github.com/markdown-it/markdown-it-container
     */
    container?: ContainerOptions;
    /**
     * Custom block configurations based on `markdown-it-container`
     */
    blocks?: Blocks;
    /**
     * @see [markdown-it-image-figures](https://www.npmjs.com/package/markdown-it-image-figures)
     */
    imageFigures?: {
        lazy: boolean;
        removeSrc: boolean;
        async: boolean;
        classes: string;
    };
    /**
     * @see https://katex.org/docs/options.html
     */
    katex?: KatexOptions;
    externalLinks?: Record<string, string>;
}

type ValaxyNodeConfig<ThemeConfig = DefaultTheme.Config> = ValaxyConfig<ThemeConfig> & ValaxyExtendConfig;
type UserValaxyNodeConfig<ThemeConfig = DefaultTheme.Config> = PartialDeep<ValaxyNodeConfig<ThemeConfig>>;
/**
 * fn with options for theme config
 */
type ValaxyConfigFn<ThemeConfig = DefaultTheme.Config> = (options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyNodeConfig | Promise<ValaxyNodeConfig>;
type ValaxyConfigExport<ThemeConfig = DefaultTheme.Config> = ValaxyNodeConfig<ThemeConfig> | ValaxyConfigFn<ThemeConfig>;
type HookResult = Promise<void> | void;
interface ValaxyHooks {
    'options:resolved': () => HookResult;
    'config:init': () => HookResult;
    /**
     * @see valaxy/node/plugins/vueRouter.ts extendRoute
     */
    'vue-router:extendRoute': (route: EditableTreeNode) => HookResult;
    'build:before': () => HookResult;
    'build:after': () => HookResult;
}
interface ValaxyNode {
    version: string;
    hooks: Hookable<ValaxyHooks>;
    hook: ValaxyNode['hooks']['hook'];
    options: ResolvedValaxyOptions;
}
interface ValaxyExtendConfig {
    /**
     * Don't fail builds due to dead links.
     *
     * @default false
     * @deprecated use `build.ignoreDeadLinks` instead
     */
    ignoreDeadLinks?: boolean | 'localhostLinks' | (string | RegExp | ((link: string) => boolean))[];
    build: {
        /**
         * Don't fail builds due to dead links.
         *
         * @default false
         */
        ignoreDeadLinks?: boolean | 'localhostLinks' | (string | RegExp | ((link: string) => boolean))[];
        /**
         * Enable SSG for pagination
         * @default false
         * When enabled, it will generate pagination pages for you.
         * `/page/1`, `/page/2`, ...
         */
        ssgForPagination: boolean;
    };
    /**
     * internal modules
     */
    modules: {
        rss: {
            /**
             * enable rss
             */
            enable: boolean;
            /**
             * @zh 全文输出
             * @en full text output
             * @default false
             */
            fullText: boolean;
        };
    };
    /**
     * Markdown Feature
     */
    features: {
        /**
         * enable katex for global
         */
        katex: boolean;
    };
    vite?: UserConfig;
    /**
     * @vitejs/plugin-vue options
     * @see https://github.com/vitejs/vite-plugin-vue/blob/main/packages/plugin-vue/README.md
     */
    vue?: Parameters<typeof Vue>[0] & {
        isCustomElement?: ((tag: string) => boolean)[];
    };
    components?: Parameters<typeof Components>[0];
    layouts?: Parameters<typeof Layouts>[0];
    router?: Parameters<typeof Router>[0];
    unocss?: VitePluginConfig;
    /**
     * unocss presets
     */
    unocssPresets?: {
        uno?: Parameters<typeof presetUno>[0];
        attributify?: Parameters<typeof presetAttributify>[0];
        icons?: Parameters<typeof presetIcons>[0];
        typography?: Parameters<typeof presetTypography>[0];
    };
    /**
     * @experimental
     * Enable Vue Devtools & Valaxy Devtools
     * @see https://devtools-next.vuejs.org/
     */
    devtools?: boolean;
    /**
     * for markdown
     */
    markdown?: MarkdownOptions & Parameters<typeof Markdown>[0];
    extendMd?: (ctx: {
        route: EditableTreeNode;
        data: Readonly<Record<string, any>>;
        content: string;
        excerpt?: string;
        path: string;
    }) => void;
    addons?: ValaxyAddons;
    hooks?: Partial<ValaxyHooks>;
}
type ValaxyAddonLike = ValaxyAddon | false | null | undefined;
type ValaxyAddons = (ValaxyAddon | string)[] | Record<string, ValaxyAddonLike>;
type ValaxyAddonFn<ThemeConfig = DefaultTheme.Config> = (addonOptions: ValaxyAddonResolver, valaxyOptions: ResolvedValaxyOptions<ThemeConfig>) => ValaxyNodeConfig | Promise<ValaxyNodeConfig>;
type ValaxyAddonExport<ThemeConfig = DefaultTheme.Config> = ValaxyNodeConfig<ThemeConfig> | ValaxyAddonFn<ThemeConfig>;
interface ValaxyAddonResolver {
    name: string;
    root: string;
    enable: boolean;
    global: boolean;
    props: Record<string, any>;
    options: Record<string, any>;
    configFile?: string;
    pkg: Record<string, any>;
    setup?: (node: ValaxyNode) => void;
}

interface ValaxyEntryOptions {
    /**
     * theme name
     */
    theme?: string;
    userRoot: string;
}
interface ResolvedValaxyOptions<ThemeConfig = DefaultTheme.Config> {
    mode: 'dev' | 'build';
    /**
     * package.json root
     */
    pkgRoot: string;
    /**
     * temp dir, store d.ts and other temp files
     * .valaxy
     */
    tempDir: string;
    /**
     * Client root path
     * @default 'valaxy/client'
     */
    clientRoot: string;
    /**
     * User root path
     * @default process.cwd()
     */
    userRoot: string;
    /**
     * Theme root path
     */
    themeRoot: string;
    /**
     * Addon root path
     */
    addonRoots: string[];
    /**
     * clientRoot, themeRoot, ...addonRoots, userRoot
     */
    roots: string[];
    theme: string;
    /**
     * Valaxy Config
     */
    config: ValaxyNodeConfig<ThemeConfig> & {
        /**
         * Generated Runtime Config
         */
        runtimeConfig: RuntimeConfig;
    };
    /**
     * config file path
     */
    configFile: string;
    siteConfigFile: string;
    themeConfigFile: string;
    pages: string[];
    /**
     * all addons
     * Record<package-name, OptionResolver>
     */
    addons: ValaxyAddonResolver[];
    /**
     * Collect redirect rule
     */
    redirects: RedirectItem[];
    env: MarkdownEnv & {
        links: string[];
    };
}
interface ValaxyServerOptions {
    onConfigReload?: (newConfig: ValaxyNodeConfig, config: ValaxyNodeConfig, force?: boolean) => void;
}
/**
 * Post process valaxyOptions
 * @param valaxyOptions
 * @param valaxyConfig
 */
declare function processValaxyOptions(valaxyOptions: ResolvedValaxyOptions, valaxyConfig: ValaxyNodeConfig): Promise<ResolvedValaxyOptions<DefaultTheme.Config>>;
declare function resolveOptions(options?: ValaxyEntryOptions, mode?: ResolvedValaxyOptions['mode']): Promise<ResolvedValaxyOptions<DefaultTheme.Config>>;
/**
 * resolve theme config
 * @param options
 */
declare function resolveThemeValaxyConfig(options: ResolvedValaxyOptions): Promise<ValaxyNodeConfig>;

/**
 * merge vite.config.ts (user & theme)
 * @internal
 */
declare function mergeViteConfigs({ userRoot, themeRoot }: ResolvedValaxyOptions, command: 'serve' | 'build'): Promise<InlineConfig>;
/**
 * generate index.html from user/theme/client
 * @internal
 */
declare function getIndexHtml({ clientRoot, themeRoot, userRoot, config }: ResolvedValaxyOptions, rawHtml: string): Promise<string>;

declare const EXCERPT_SEPARATOR = "<!-- more -->";
declare const EXTERNAL_URL_RE: RegExp;
declare const PATHNAME_PROTOCOL_RE: RegExp;
declare const ALL_ROUTE = "/:all(.*)*";
declare const customElements: Set<string>;

declare function build(valaxyApp: ValaxyNode, viteConfig?: InlineConfig): Promise<void>;
declare function ssgBuild(valaxyApp: ValaxyNode, viteConfig?: InlineConfig): Promise<void>;
/**
 * post process for ssg fix extra string like `/html>` `ml>` `l>`
 * handle tasks after ssg build
 * todo find why
 * @param options
 */
declare function postProcessForSSG(options: ResolvedValaxyOptions): Promise<void>;
declare function generateClientRedirects(options: ResolvedValaxyOptions): Promise<void>;

interface LoadConfigFromFileOptions {
    cwd?: string;
    valaxyOptions?: ResolvedValaxyOptions;
}
type UserInputConfig = Record<string, any>;
interface ResolvedConfig<T extends UserInputConfig = UserInputConfig> {
    config: T;
    configFile: string;
}
declare function loadConfig<T extends UserInputConfig = UserInputConfig>(options: {
    name: string;
    cwd: string;
}): Promise<ResolvedConfig<T>>;
declare function loadConfigFromFile<T extends UserInputConfig>(file: string, options?: LoadConfigFromFileOptions): Promise<ResolvedConfig<T>>;

declare const defaultValaxyConfig: ValaxyNodeConfig;
/**
 * Type helper for valaxy.config.ts
 */
declare function defineValaxyConfig<ThemeConfig>(config: UserValaxyNodeConfig<ThemeConfig>): PartialDeep$1<ValaxyNodeConfig<ThemeConfig>>;
declare const defineConfig: typeof defineValaxyConfig;
declare function resolveValaxyConfigFromRoot(root: string, options?: ResolvedValaxyOptions): Promise<ResolvedConfig<ValaxyNodeConfig>>;
/**
 * merge valaxy.config
 * (source, default)
 */
declare const mergeValaxyConfig: <Source extends {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, Defaults extends Array<{
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
} | (number | boolean | any[] | Record<never, any> | null | undefined)>>(source: Source, ...defaults: Defaults) => defu.Defu<Source, Defaults>;
/**
 * resolve user valaxy config
 * options only have userRoot
 * @param options
 */
declare function resolveValaxyConfig(options: ValaxyEntryOptions): Promise<{
    config: ValaxyNodeConfig;
    configFile: string;
    theme: string;
}>;

declare function defineValaxyAddon<AddonOptions = object>(addonFunc: (addonOptions?: AddonOptions, valaxyOptions?: ResolvedValaxyOptions) => ValaxyAddon & {
    setup?: ValaxyAddonResolver['setup'];
}): (addonOptions?: AddonOptions, valaxyOptions?: ResolvedValaxyOptions) => ValaxyAddon & {
    setup?: ValaxyAddonResolver["setup"];
};
declare const defineAddon: typeof defineValaxyAddon;
declare function resolveAddonsConfig(addons: ValaxyAddonResolver[], options: ResolvedValaxyOptions): Promise<ValaxyNodeConfig>;

declare const defaultSiteConfig: SiteConfig;
/**
 * Type helper for site.config.ts
 * @param config
 */
declare function defineSiteConfig(config: UserSiteConfig): valaxy_types.PartialDeep<SiteConfig>;
/**
 * resolve valaxy config from special root
 */
declare function resolveSiteConfigFromRoot(root: string): Promise<ResolvedConfig<valaxy_types.PartialDeep<SiteConfig>>>;
/**
 * resolve site.config.ts and merge with default
 * @param root
 */
declare function resolveSiteConfig(root: string): Promise<{
    siteConfig: valaxy_types.PartialDeep<SiteConfig>;
    siteConfigFile: string;
}>;

/**
 * resolve theme config from special root
 */
declare function resolveThemeConfigFromRoot(root: string): Promise<ResolvedConfig<DefaultTheme.Config>>;
/**
 * resolve theme.config.ts and merge with default
 */
declare function resolveUserThemeConfig(options: ResolvedValaxyOptions): Promise<{
    themeConfig: DefaultTheme.Config;
    themeConfigFile: string;
}>;
type ValaxyConfigExtendKey = 'vite' | 'vue' | 'unocss' | 'unocssPresets' | 'markdown' | 'extendMd' | 'addons';
type ValaxyPickConfig = Pick<ValaxyNodeConfig, ValaxyConfigExtendKey>;
type ValaxyTheme<ThemeConfig = DefaultTheme.Config> = ValaxyPickConfig & {
    themeConfig?: ThemeConfig;
};
declare function defineValaxyTheme<ThemeConfig = DefaultTheme.Config>(theme: ValaxyTheme<ThemeConfig> | ((options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyTheme<ThemeConfig>)): ValaxyTheme<ThemeConfig> | ((options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyTheme<ThemeConfig>);
declare const defineTheme: typeof defineValaxyTheme;

type UnoSetup = () => Awaitable<Partial<VitePluginConfig> | undefined>;
declare function defineUnoSetup(fn: UnoSetup): UnoSetup;

/**
 * @packageDocumentation valaxy plugin
 */

/**
 * create valaxy loader (custom virtual modules)
 * multiple plugins
 * @internal
 * @param options
 * @param serverOptions
 */
declare function createValaxyLoader(options: ResolvedValaxyOptions, serverOptions?: ValaxyServerOptions): Promise<Plugin[]>;

declare function ViteValaxyPlugins(valaxyApp: ValaxyNode, serverOptions?: ValaxyServerOptions): Promise<(PluginOption | PluginOption[])[]>;

declare function createServer(valaxyApp: ValaxyNode, viteConfig?: InlineConfig, serverOptions?: ValaxyServerOptions): Promise<vite.ViteDevServer>;

declare function getGitTimestamp(file: string, type?: 'created' | 'updated'): Promise<number>;

declare function resolveImportPath(importName: string, ensure?: true): string;

/**
 * is url external (http/https:)
 * @param str
 */
declare function isExternal(str: string): boolean;
/**
 * slash path for windows
 * @param str
 */
declare function slash(str: string): string;
declare function ensurePrefix(prefix: string, str: string): string;
declare function toAtFS(path: string): string;
declare function isPath(name: string): boolean;
/**
 * transform obj for vite code
 * @param obj
 */
declare function transformObject(obj: any): string;

export { ALL_ROUTE, EXCERPT_SEPARATOR, EXTERNAL_URL_RE, type HookResult, type LoadConfigFromFileOptions, PATHNAME_PROTOCOL_RE, type ResolvedConfig, type ResolvedValaxyOptions, type UnoSetup, type UserInputConfig, type UserValaxyNodeConfig, type ValaxyAddonExport, type ValaxyAddonFn, type ValaxyAddonLike, type ValaxyAddonResolver, type ValaxyAddons, type ValaxyConfigExport, type ValaxyConfigExtendKey, type ValaxyConfigFn, type ValaxyEntryOptions, type ValaxyExtendConfig, type ValaxyHooks, type ValaxyNode, type ValaxyNodeConfig, type ValaxyPickConfig, type ValaxyServerOptions, type ValaxyTheme, ViteValaxyPlugins, build, createServer, createValaxyLoader, customElements, defaultSiteConfig, defaultValaxyConfig, defineAddon, defineConfig, defineSiteConfig, defineTheme, defineUnoSetup, defineValaxyAddon, defineValaxyConfig, defineValaxyTheme, ensurePrefix, generateClientRedirects, getGitTimestamp, getIndexHtml, isExternal, isPath, loadConfig, loadConfigFromFile, mergeValaxyConfig, mergeViteConfigs, postProcessForSSG, processValaxyOptions, resolveAddonsConfig, resolveImportPath, resolveOptions, resolveSiteConfig, resolveSiteConfigFromRoot, resolveThemeConfigFromRoot, resolveThemeValaxyConfig, resolveUserThemeConfig, resolveValaxyConfig, resolveValaxyConfigFromRoot, slash, ssgBuild, toAtFS, transformObject };
