import { g as getAppWindow, d as defineComponent, c as computed, o as openBlock, a as createElementBlock, n as normalizeClass, b as createCommentVNode, r as renderSlot, e as ref, f as onMounted, h as createBaseVNode, i as resolveComponent, j as createBlock, w as withCtx, t as toDisplayString, F as Fragment, k as renderList, l as createTextVNode, m as createVNode, p as pageData, q as toRaw, u as unref, s as frontmatter, v as getWindowProperty, x as getGlobalValaxyProperty, y as activePath, z as devtoolsRouter, A as isStaticMode } from './index-B1KXxAEg.js';
import { _ as _export_sfc } from './_plugin-vue_export-helper-DgDhiqFL.js';
import { a as axios, g, M } from './splitpanes.es-CS1Tksze.js';

const target = getAppWindow();
function openInEditor(options = {}) {
  const { file, line = 0, column = 0 } = options;
  if (file) {
    const baseUrl = window.location.origin;
    target?.__VUE_INSPECTOR__.openInEditor(baseUrl, file, line, column);
  }
}

/* Injected with object hook! */

const _sfc_main$7 = /* @__PURE__ */ defineComponent({
  __name: "AGUIButton",
  props: {
    icon: {},
    size: {}
  },
  setup(__props) {
    const props = __props;
    const classes = computed(() => {
      const cls = [];
      if (props.size)
        cls.push(props.size);
      return cls;
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("button", {
        class: normalizeClass([classes.value, "agui-button"])
      }, [
        _ctx.icon ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(["mr-1 inline-flex", _ctx.icon])
        }, null, 2)) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});

/* Injected with object hook! */

/* Injected with object hook! */

const _hoisted_1$5 = {
  key: 0,
  class: "relative flex"
};
const _hoisted_2$3 = {
  key: 0,
  class: "absolute"
};
const _hoisted_3$2 = { class: "absolute left-1 h-full flex items-center justify-center text-xs op-60" };
const _hoisted_4$1 = ["value", "placeholder", "autofocus"];
const _hoisted_5 = ["value", "placeholder"];
const _sfc_main$6 = /* @__PURE__ */ defineComponent({
  __name: "AGUIInput",
  props: {
    autofocus: { type: Boolean },
    className: {},
    prefixIcon: {},
    modelValue: {},
    placeholder: {}
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    function updateModelValue(event) {
      const val = event.target?.value || "";
      emit("update:modelValue", val);
    }
    const inputRef = ref();
    onMounted(async () => {
      if (props.autofocus) {
        setTimeout(() => {
          inputRef.value?.focus();
        }, 1);
      }
    });
    return (_ctx, _cache) => {
      return _ctx.prefixIcon ? (openBlock(), createElementBlock("div", _hoisted_1$5, [
        _ctx.$slots.prefix ? (openBlock(), createElementBlock("div", _hoisted_2$3, [
          renderSlot(_ctx.$slots, "prefix")
        ])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_3$2, [
          _ctx.prefixIcon ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(_ctx.prefixIcon)
          }, null, 2)) : createCommentVNode("", true)
        ]),
        createBaseVNode("input", {
          ref_key: "inputRef",
          ref: inputRef,
          class: normalizeClass(["agui-input w-full px-1 shadow shadow-inset", {
            "pl-5": _ctx.prefixIcon,
            [_ctx.className || ""]: true
          }]),
          value: _ctx.modelValue,
          placeholder: _ctx.placeholder,
          autofocus: _ctx.autofocus,
          onInput: updateModelValue
        }, null, 42, _hoisted_4$1)
      ])) : (openBlock(), createElementBlock("input", {
        key: 1,
        class: "agui-input w-full px-1 shadow shadow-inset",
        value: _ctx.modelValue,
        placeholder: _ctx.placeholder,
        onInput: updateModelValue
      }, null, 40, _hoisted_5));
    };
  }
});

/* Injected with object hook! */

/* Injected with object hook! */

const _hoisted_1$4 = /* @__PURE__ */ createBaseVNode("div", {
  m: "x-1",
  "inline-flex": "",
  "i-ri-folder-2-line": ""
}, null, -1);
const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  __name: "VDPostCategories",
  props: {
    categories: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_RouterLink = resolveComponent("RouterLink");
      return openBlock(), createBlock(_component_RouterLink, {
        to: {
          path: "/categories",
          query: { category: Array.isArray(_ctx.categories) ? _ctx.categories.join("/") : _ctx.categories }
        },
        class: "post-category transition text-xs hover:(text-blue-500 border-blue-500)",
        "px-2": "",
        "py-1": "",
        border: "",
        "rounded-full": "",
        "inline-flex": "",
        "justify-center": "",
        "items-center": "",
        bg: "hover:(blue-500 opacity-10)"
      }, {
        default: withCtx(() => [
          _hoisted_1$4,
          createBaseVNode("span", null, toDisplayString(Array.isArray(_ctx.categories) ? _ctx.categories.join(" > ") : _ctx.categories), 1)
        ]),
        _: 1
      }, 8, ["to"]);
    };
  }
});

/* Injected with object hook! */

/* unplugin-vue-components disabled */const _sfc_main$4 = {};

const _hoisted_1$3 = {
  class: "vd-tag inline-flex shadow border rounded text-xs",
  p: "x-2 y-1"
};

function _sfc_render(_ctx, _cache) {
  return (openBlock(), createElementBlock("div", _hoisted_1$3, [
    renderSlot(_ctx.$slots, "default")
  ]))
}
const __unplugin_components_0 = /*#__PURE__*/_export_sfc(_sfc_main$4, [['render',_sfc_render]]);
/* Injected with object hook! */

const LogLevels = {
  silent: Number.NEGATIVE_INFINITY,
  fatal: 0,
  error: 0,
  warn: 1,
  log: 2,
  info: 3,
  success: 3,
  fail: 3,
  ready: 3,
  start: 3,
  box: 3,
  debug: 4,
  trace: 5,
  verbose: Number.POSITIVE_INFINITY
};
const LogTypes = {
  // Silent
  silent: {
    level: -1
  },
  // Level 0
  fatal: {
    level: LogLevels.fatal
  },
  error: {
    level: LogLevels.error
  },
  // Level 1
  warn: {
    level: LogLevels.warn
  },
  // Level 2
  log: {
    level: LogLevels.log
  },
  // Level 3
  info: {
    level: LogLevels.info
  },
  success: {
    level: LogLevels.success
  },
  fail: {
    level: LogLevels.fail
  },
  ready: {
    level: LogLevels.info
  },
  start: {
    level: LogLevels.info
  },
  box: {
    level: LogLevels.info
  },
  // Level 4
  debug: {
    level: LogLevels.debug
  },
  // Level 5
  trace: {
    level: LogLevels.trace
  },
  // Verbose
  verbose: {
    level: LogLevels.verbose
  }
};

function isObject(value) {
  return value !== null && typeof value === "object";
}
function _defu(baseObject, defaults, namespace = ".", merger) {
  if (!isObject(defaults)) {
    return _defu(baseObject, {}, namespace);
  }
  const object = Object.assign({}, defaults);
  for (const key in baseObject) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const value = baseObject[key];
    if (value === null || value === void 0) {
      continue;
    }
    if (Array.isArray(value) && Array.isArray(object[key])) {
      object[key] = [...value, ...object[key]];
    } else if (isObject(value) && isObject(object[key])) {
      object[key] = _defu(
        value,
        object[key],
        (namespace ? `${namespace}.` : "") + key.toString());
    } else {
      object[key] = value;
    }
  }
  return object;
}
function createDefu(merger) {
  return (...arguments_) => (
    // eslint-disable-next-line unicorn/no-array-reduce
    arguments_.reduce((p, c) => _defu(p, c, ""), {})
  );
}
const defu = createDefu();

function isPlainObject(obj) {
  return Object.prototype.toString.call(obj) === "[object Object]";
}
function isLogObj(arg) {
  if (!isPlainObject(arg)) {
    return false;
  }
  if (!arg.message && !arg.args) {
    return false;
  }
  if (arg.stack) {
    return false;
  }
  return true;
}

let paused = false;
const queue = [];
class Consola {
  constructor(options = {}) {
    const types = options.types || LogTypes;
    this.options = defu(
      {
        ...options,
        defaults: { ...options.defaults },
        level: _normalizeLogLevel(options.level, types),
        reporters: [...options.reporters || []]
      },
      {
        types: LogTypes,
        throttle: 1e3,
        throttleMin: 5,
        formatOptions: {
          date: true,
          colors: false,
          compact: true
        }
      }
    );
    for (const type in types) {
      const defaults = {
        type,
        ...this.options.defaults,
        ...types[type]
      };
      this[type] = this._wrapLogFn(defaults);
      this[type].raw = this._wrapLogFn(
        defaults,
        true
      );
    }
    if (this.options.mockFn) {
      this.mockTypes();
    }
    this._lastLog = {};
  }
  get level() {
    return this.options.level;
  }
  set level(level) {
    this.options.level = _normalizeLogLevel(
      level,
      this.options.types,
      this.options.level
    );
  }
  prompt(message, opts) {
    if (!this.options.prompt) {
      throw new Error("prompt is not supported!");
    }
    return this.options.prompt(message, opts);
  }
  create(options) {
    const instance = new Consola({
      ...this.options,
      ...options
    });
    if (this._mockFn) {
      instance.mockTypes(this._mockFn);
    }
    return instance;
  }
  withDefaults(defaults) {
    return this.create({
      ...this.options,
      defaults: {
        ...this.options.defaults,
        ...defaults
      }
    });
  }
  withTag(tag) {
    return this.withDefaults({
      tag: this.options.defaults.tag ? this.options.defaults.tag + ":" + tag : tag
    });
  }
  addReporter(reporter) {
    this.options.reporters.push(reporter);
    return this;
  }
  removeReporter(reporter) {
    if (reporter) {
      const i = this.options.reporters.indexOf(reporter);
      if (i >= 0) {
        return this.options.reporters.splice(i, 1);
      }
    } else {
      this.options.reporters.splice(0);
    }
    return this;
  }
  setReporters(reporters) {
    this.options.reporters = Array.isArray(reporters) ? reporters : [reporters];
    return this;
  }
  wrapAll() {
    this.wrapConsole();
    this.wrapStd();
  }
  restoreAll() {
    this.restoreConsole();
    this.restoreStd();
  }
  wrapConsole() {
    for (const type in this.options.types) {
      if (!console["__" + type]) {
        console["__" + type] = console[type];
      }
      console[type] = this[type].raw;
    }
  }
  restoreConsole() {
    for (const type in this.options.types) {
      if (console["__" + type]) {
        console[type] = console["__" + type];
        delete console["__" + type];
      }
    }
  }
  wrapStd() {
    this._wrapStream(this.options.stdout, "log");
    this._wrapStream(this.options.stderr, "log");
  }
  _wrapStream(stream, type) {
    if (!stream) {
      return;
    }
    if (!stream.__write) {
      stream.__write = stream.write;
    }
    stream.write = (data) => {
      this[type].raw(String(data).trim());
    };
  }
  restoreStd() {
    this._restoreStream(this.options.stdout);
    this._restoreStream(this.options.stderr);
  }
  _restoreStream(stream) {
    if (!stream) {
      return;
    }
    if (stream.__write) {
      stream.write = stream.__write;
      delete stream.__write;
    }
  }
  pauseLogs() {
    paused = true;
  }
  resumeLogs() {
    paused = false;
    const _queue = queue.splice(0);
    for (const item of _queue) {
      item[0]._logFn(item[1], item[2]);
    }
  }
  mockTypes(mockFn) {
    const _mockFn = mockFn || this.options.mockFn;
    this._mockFn = _mockFn;
    if (typeof _mockFn !== "function") {
      return;
    }
    for (const type in this.options.types) {
      this[type] = _mockFn(type, this.options.types[type]) || this[type];
      this[type].raw = this[type];
    }
  }
  _wrapLogFn(defaults, isRaw) {
    return (...args) => {
      if (paused) {
        queue.push([this, defaults, args, isRaw]);
        return;
      }
      return this._logFn(defaults, args, isRaw);
    };
  }
  _logFn(defaults, args, isRaw) {
    if ((defaults.level || 0) > this.level) {
      return false;
    }
    const logObj = {
      date: /* @__PURE__ */ new Date(),
      args: [],
      ...defaults,
      level: _normalizeLogLevel(defaults.level, this.options.types)
    };
    if (!isRaw && args.length === 1 && isLogObj(args[0])) {
      Object.assign(logObj, args[0]);
    } else {
      logObj.args = [...args];
    }
    if (logObj.message) {
      logObj.args.unshift(logObj.message);
      delete logObj.message;
    }
    if (logObj.additional) {
      if (!Array.isArray(logObj.additional)) {
        logObj.additional = logObj.additional.split("\n");
      }
      logObj.args.push("\n" + logObj.additional.join("\n"));
      delete logObj.additional;
    }
    logObj.type = typeof logObj.type === "string" ? logObj.type.toLowerCase() : "log";
    logObj.tag = typeof logObj.tag === "string" ? logObj.tag : "";
    const resolveLog = (newLog = false) => {
      const repeated = (this._lastLog.count || 0) - this.options.throttleMin;
      if (this._lastLog.object && repeated > 0) {
        const args2 = [...this._lastLog.object.args];
        if (repeated > 1) {
          args2.push(`(repeated ${repeated} times)`);
        }
        this._log({ ...this._lastLog.object, args: args2 });
        this._lastLog.count = 1;
      }
      if (newLog) {
        this._lastLog.object = logObj;
        this._log(logObj);
      }
    };
    clearTimeout(this._lastLog.timeout);
    const diffTime = this._lastLog.time && logObj.date ? logObj.date.getTime() - this._lastLog.time.getTime() : 0;
    this._lastLog.time = logObj.date;
    if (diffTime < this.options.throttle) {
      try {
        const serializedLog = JSON.stringify([
          logObj.type,
          logObj.tag,
          logObj.args
        ]);
        const isSameLog = this._lastLog.serialized === serializedLog;
        this._lastLog.serialized = serializedLog;
        if (isSameLog) {
          this._lastLog.count = (this._lastLog.count || 0) + 1;
          if (this._lastLog.count > this.options.throttleMin) {
            this._lastLog.timeout = setTimeout(
              resolveLog,
              this.options.throttle
            );
            return;
          }
        }
      } catch {
      }
    }
    resolveLog(true);
  }
  _log(logObj) {
    for (const reporter of this.options.reporters) {
      reporter.log(logObj, {
        options: this.options
      });
    }
  }
}
function _normalizeLogLevel(input, types = {}, defaultLevel = 3) {
  if (input === void 0) {
    return defaultLevel;
  }
  if (typeof input === "number") {
    return input;
  }
  if (types[input] && types[input].level !== void 0) {
    return types[input].level;
  }
  return defaultLevel;
}
Consola.prototype.add = Consola.prototype.addReporter;
Consola.prototype.remove = Consola.prototype.removeReporter;
Consola.prototype.clear = Consola.prototype.removeReporter;
Consola.prototype.withScope = Consola.prototype.withTag;
Consola.prototype.mock = Consola.prototype.mockTypes;
Consola.prototype.pause = Consola.prototype.pauseLogs;
Consola.prototype.resume = Consola.prototype.resumeLogs;
function createConsola$1(options = {}) {
  return new Consola(options);
}

/* Injected with object hook! */

class BrowserReporter {
  constructor(options) {
    this.options = { ...options };
    this.defaultColor = "#7f8c8d";
    this.levelColorMap = {
      0: "#c0392b",
      // Red
      1: "#f39c12",
      // Yellow
      3: "#00BCD4"
      // Cyan
    };
    this.typeColorMap = {
      success: "#2ecc71"
      // Green
    };
  }
  _getLogFn(level) {
    if (level < 1) {
      return console.__error || console.error;
    }
    if (level === 1) {
      return console.__warn || console.warn;
    }
    return console.__log || console.log;
  }
  log(logObj) {
    const consoleLogFn = this._getLogFn(logObj.level);
    const type = logObj.type === "log" ? "" : logObj.type;
    const tag = logObj.tag || "";
    const color = this.typeColorMap[logObj.type] || this.levelColorMap[logObj.level] || this.defaultColor;
    const style = `
      background: ${color};
      border-radius: 0.5em;
      color: white;
      font-weight: bold;
      padding: 2px 0.5em;
    `;
    const badge = `%c${[tag, type].filter(Boolean).join(":")}`;
    if (typeof logObj.args[0] === "string") {
      consoleLogFn(
        `${badge}%c ${logObj.args[0]}`,
        style,
        // Empty string as style resets to default console style
        "",
        ...logObj.args.slice(1)
      );
    } else {
      consoleLogFn(badge, style, ...logObj.args);
    }
  }
}

function createConsola(options = {}) {
  const consola2 = createConsola$1({
    reporters: options.reporters || [new BrowserReporter({})],
    prompt(message, options2 = {}) {
      if (options2.type === "confirm") {
        return Promise.resolve(confirm(message));
      }
      return Promise.resolve(prompt(message));
    },
    ...options
  });
  return consola2;
}
const consola = createConsola();

/* Injected with object hook! */

const _hoisted_1$2 = { key: 0 };
const _hoisted_2$2 = /* @__PURE__ */ createBaseVNode("span", { "mr-1": "" }, ":", -1);
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "PageFrontmatter",
  props: {
    frontmatter: {}
  },
  setup(__props) {
    const props = __props;
    const newFm = ref(props.frontmatter);
    async function saveNewFm() {
      const res = await axios.post("/valaxy-devtools-api/frontmatter", {
        pageData: pageData.value,
        frontmatter: toRaw(newFm.value)
      });
      if (res)
        consola.success("Frontmatter saved");
    }
    return (_ctx, _cache) => {
      const _component_VDTag = __unplugin_components_0;
      const _component_VDPostCategories = _sfc_main$5;
      const _component_AGUIInput = _sfc_main$6;
      const _component_AGUIButton = _sfc_main$7;
      return openBlock(), createElementBlock("div", null, [
        _ctx.frontmatter ? (openBlock(), createElementBlock("ul", _hoisted_1$2, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.frontmatter, (value, key) => {
            return openBlock(), createElementBlock("li", { key }, [
              createBaseVNode("strong", null, toDisplayString(key), 1),
              _hoisted_2$2,
              key === "tags" ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(value, (tag) => {
                return openBlock(), createBlock(_component_VDTag, { key: tag }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(tag), 1)
                  ]),
                  _: 2
                }, 1024);
              }), 128)) : key === "categories" ? (openBlock(), createBlock(_component_VDPostCategories, {
                key: 1,
                categories: value
              }, null, 8, ["categories"])) : key === "encryptedContent" ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                createTextVNode(" [Encrypted] ")
              ], 64)) : key === "partiallyEncryptedContents" ? (openBlock(), createElementBlock(Fragment, { key: 3 }, [
                createTextVNode(" [Partially Encrypted] ")
              ], 64)) : key === "title" ? (openBlock(), createBlock(_component_AGUIInput, {
                key: 4,
                modelValue: newFm.value.title,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => newFm.value.title = $event)
              }, null, 8, ["modelValue"])) : (openBlock(), createElementBlock(Fragment, { key: 5 }, [
                createTextVNode(toDisplayString(value), 1)
              ], 64))
            ]);
          }), 128))
        ])) : createCommentVNode("", true),
        createVNode(_component_AGUIButton, { onClick: saveNewFm }, {
          default: withCtx(() => [
            createTextVNode(" Save Frontmatter ")
          ]),
          _: 1
        })
      ]);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1$1 = { p: "2" };
const _hoisted_2$1 = {
  class: "flex",
  gap: "2",
  "py-2": ""
};
const _hoisted_3$1 = /* @__PURE__ */ createBaseVNode("div", { "i-vscode-icons:file-type-vscode": "" }, null, -1);
const _hoisted_4 = [
  _hoisted_3$1
];
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "PostPanel",
  setup(__props) {
    function launchEditor() {
      openInEditor({
        file: getWindowProperty("$pageData").path
      });
    }
    return (_ctx, _cache) => {
      const _component_PageFrontmatter = _sfc_main$3;
      return openBlock(), createElementBlock("div", _hoisted_1$1, [
        createBaseVNode("div", _hoisted_2$1, [
          createBaseVNode("button", {
            class: "text-xs shadow transition hover:shadow-lg p-2",
            onClick: _cache[0] || (_cache[0] = ($event) => launchEditor())
          }, _hoisted_4)
        ]),
        unref(frontmatter) ? (openBlock(), createBlock(_component_PageFrontmatter, {
          key: 0,
          frontmatter: unref(frontmatter)
        }, null, 8, ["frontmatter"])) : createCommentVNode("", true)
      ]);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1 = {
  class: "h-full",
  overflow: "auto",
  pl: "12",
  pr: "4",
  py: "4"
};
const _hoisted_2 = { flex: "" };
const _hoisted_3 = ["onClick"];
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "VDPostList",
  setup(__props) {
    const postList = ref();
    onMounted(() => {
      postList.value = getGlobalValaxyProperty("postList").value;
    });
    function onClickPost(post) {
      devtoolsRouter.value?.push(post.path);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("ul", _hoisted_1, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(postList.value, (post) => {
          return openBlock(), createElementBlock("li", {
            key: post.path,
            class: "list-decimal"
          }, [
            createBaseVNode("div", _hoisted_2, [
              createBaseVNode("span", {
                class: normalizeClass(["inline-flex flex-grow cursor-pointer hover:text-blue-500", { "text-blue-500 font-bold": unref(activePath) === post.path }]),
                onClick: ($event) => onClickPost(post)
              }, toDisplayString(post.title), 11, _hoisted_3)
            ])
          ]);
        }), 128))
      ]);
    };
  }
});

/* Injected with object hook! */

const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "index",
  setup(__props) {
    onMounted(() => {
      if (isStaticMode)
        document.title = "Valaxy DevTools (Production)";
    });
    return (_ctx, _cache) => {
      const _component_VDPostList = _sfc_main$1;
      const _component_PostPanel = _sfc_main$2;
      return openBlock(), createBlock(unref(M), { class: "h-full" }, {
        default: withCtx(() => [
          createVNode(unref(g), null, {
            default: withCtx(() => [
              createVNode(_component_VDPostList)
            ]),
            _: 1
          }),
          createVNode(unref(g), null, {
            default: withCtx(() => [
              createVNode(_component_PostPanel)
            ]),
            _: 1
          })
        ]),
        _: 1
      });
    };
  }
});

/* Injected with object hook! */

/* Injected with object hook! */

export { _sfc_main as default };
