import { d as defineComponent, e as ref, f as onMounted, x as getGlobalValaxyProperty, o as openBlock, j as createBlock, w as withCtx, u as unref, m as createVNode, h as createBaseVNode, a as createElementBlock, k as renderList, F as Fragment, B as withDirectives, C as vModelCheckbox, t as toDisplayString, D as vModelText } from './index-B1KXxAEg.js';
import { g, M, a as axios } from './splitpanes.es-CS1Tksze.js';

const _hoisted_1 = {
  class: "h-full",
  overflow: "auto",
  pl: "12",
  pr: "4",
  py: "4"
};
const _hoisted_2 = ["name", "value"];
const _hoisted_3 = ["for"];
const _hoisted_4 = /* @__PURE__ */ createBaseVNode("h2", null, "原frontmatter字段->新字段", -1);
const _hoisted_5 = {
  class: "h-full",
  overflow: "auto",
  pl: "12",
  pr: "4",
  py: "4"
};
const _hoisted_6 = ["for"];
const _hoisted_7 = ["onUpdate:modelValue", "name"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "migration",
  setup(__props) {
    const postList = ref([]);
    const mapper = ref({});
    onMounted(() => {
      postList.value = getGlobalValaxyProperty("postList").value;
      postList.value.forEach((element) => {
        const keys = Object.keys(element);
        for (const key of keys)
          mapper.value[key] = "";
      });
    });
    const checkedPosts = ref([]);
    function clearPosts(select) {
      checkedPosts.value.length = 0;
      if (select)
        checkedPosts.value = checkedPosts.value.concat(postList.value.map((i) => i.path));
    }
    async function migration() {
      const update = {};
      for (const key in mapper.value) {
        if (mapper.value[key] !== "")
          update[key] = mapper.value[key];
      }
      const res = await axios.post("/valaxy-devtools-api/migration", {
        pageData: checkedPosts.value,
        frontmatter: update
      });
      if (res.data === "ok") ;
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(M), { class: "h-full" }, {
        default: withCtx(() => [
          createVNode(unref(g), null, {
            default: withCtx(() => [
              createBaseVNode("button", {
                onClick: _cache[0] || (_cache[0] = ($event) => clearPosts(true))
              }, " 全选 "),
              createBaseVNode("button", {
                onClick: _cache[1] || (_cache[1] = ($event) => clearPosts(false))
              }, " 清空 "),
              createBaseVNode("ul", _hoisted_1, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(postList.value, (post) => {
                  return openBlock(), createElementBlock("li", {
                    key: post.path,
                    class: "list-decimal"
                  }, [
                    withDirectives(createBaseVNode("input", {
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => checkedPosts.value = $event),
                      type: "checkbox",
                      name: post.path,
                      value: post.path
                    }, null, 8, _hoisted_2), [
                      [vModelCheckbox, checkedPosts.value]
                    ]),
                    createBaseVNode("label", {
                      for: post.path
                    }, toDisplayString(post.title), 9, _hoisted_3)
                  ]);
                }), 128))
              ])
            ]),
            _: 1
          }),
          createVNode(unref(g), null, {
            default: withCtx(() => [
              _hoisted_4,
              createBaseVNode("button", { onClick: migration }, " 提交 "),
              createBaseVNode("ul", _hoisted_5, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(mapper.value, (_, key) => {
                  return openBlock(), createElementBlock("li", { key }, [
                    createBaseVNode("label", {
                      for: key,
                      style: { "margin-right": "20px" }
                    }, toDisplayString(key) + " ->", 9, _hoisted_6),
                    withDirectives(createBaseVNode("input", {
                      "onUpdate:modelValue": ($event) => mapper.value[key] = $event,
                      name: key
                    }, null, 8, _hoisted_7), [
                      [vModelText, mapper.value[key]]
                    ])
                  ]);
                }), 128))
              ])
            ]),
            _: 1
          })
        ]),
        _: 1
      });
    };
  }
});

/* Injected with object hook! */

/* Injected with object hook! */

export { _sfc_main as default };
