import c from 'picocolors';
import sirv from 'sirv';
import { createProxyMiddleware } from 'http-proxy-middleware';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import bodyParser from 'body-parser';
import matter from 'gray-matter';
import { JSON_SCHEMA } from 'js-yaml';
import fs from 'fs-extra';

const DIR_DIST = typeof __dirname !== "undefined" ? __dirname : dirname(fileURLToPath(import.meta.url));
const DEVTOOLS_CLIENT_FOLDER = resolve(DIR_DIST, "../dist/client");
const DIR_CLIENT = DEVTOOLS_CLIENT_FOLDER;

const prefix = "/valaxy-devtools-api";
async function migration(path, frontmatter) {
  if (fs.existsSync(path)) {
    const rawMd = await fs.readFile(path, "utf-8");
    const matterFile = matter(rawMd, { schema: JSON_SCHEMA });
    let mod = false;
    for (const key in frontmatter) {
      if (key in matterFile.data) {
        matterFile.data[frontmatter[key]] = matterFile.data[key];
        delete matterFile.data[key];
        mod = true;
      }
    }
    if (mod) {
      const newMd = matter.stringify(matterFile.content, matterFile.data);
      await fs.writeFile(path, newMd);
    }
  }
}
function registerApi(server, _viteConfig) {
  const app = server.middlewares;
  app.use(bodyParser.json());
  app.use(`${prefix}/frontmatter`, async (req, _res) => {
    if (req.method === "POST") {
      const { pageData, frontmatter: newFm } = await req.body;
      const path = pageData.path;
      if (fs.existsSync(path)) {
        const rawMd = await fs.readFile(path, "utf-8");
        const matterFile = matter(rawMd);
        matterFile.data = newFm;
        const newMd = matter.stringify(matterFile.content, matterFile.data);
        await fs.writeFile(path, newMd);
      }
    }
  });
  app.use(`${prefix}/migration`, async (req, _res) => {
    if (req.method === "POST") {
      const { pageData, frontmatter } = await req.body;
      const worker = [];
      for (const item of pageData) {
        const path = item;
        worker.push(migration(path, frontmatter));
      }
      Promise.all(worker).then(() => {
        _res.end("ok");
      }).catch((_) => {
        _res.end("migration error");
      });
    }
  });
}

const NAME = "valaxy:devtools";
function ValaxyDevtools(options = {}) {
  let config;
  function configureServer(server) {
    const _print = server.printUrls;
    const base = (options.base ?? server.config.base) || "/";
    const devtoolsUrl = `${base}__valaxy_devtools__/`;
    if (import.meta.env?.VITE_DEV_VALAXY_DEVTOOLS === "true") {
      server.middlewares.use(devtoolsUrl, createProxyMiddleware({
        target: "http://localhost:5001/#/",
        changeOrigin: true
      }));
    } else {
      server.middlewares.use(devtoolsUrl, sirv(DIR_CLIENT, {
        single: true,
        dev: true
      }));
    }
    server.printUrls = () => {
      let host = `${config.server.https ? "https" : "http"}://localhost:${config.server.port || "80"}`;
      const url = server.resolvedUrls?.local[0];
      if (url) {
        try {
          const u = new URL(url);
          host = `${u.protocol}//${u.host}`;
        } catch (error) {
          console.warn("Parse resolved url failed:", error);
        }
      }
      _print();
      const colorUrl = (url2) => c.green(url2.replace(/:(\d+)\//, (_, port) => `:${c.bold(port)}/`));
      console.log(`  ${c.green("\u279C")}  ${c.bold("Inspect")}: ${colorUrl(`${host}${base}__inspect/`)}`);
    };
    registerApi(server);
  }
  const plugin = {
    name: NAME,
    enforce: "pre",
    configResolved(_config) {
      config = _config;
    },
    configureServer(server) {
      configureServer(server);
    }
  };
  return plugin;
}

export { ValaxyDevtools as default };
