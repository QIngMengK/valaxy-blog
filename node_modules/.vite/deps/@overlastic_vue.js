import "./chunk-QWN5BXRD.js";

// node_modules/.pnpm/@overlastic+vue@0.4.7_typescript@5.5.3/node_modules/@overlastic/vue/dist/index.js
import { getCurrentInstance, inject, onMounted, provide } from "vue-demi";
import { useVModel } from "@vueuse/core";

// node_modules/.pnpm/@overlastic+core@0.4.3/node_modules/@overlastic/core/dist/index.js
var UnifiedOverlayProviderID = "unified-overlay";
function defineGlobalElement(id = "", root = document.body) {
  const el = document.createElement("div");
  if (id)
    el.id = id;
  if (root !== false)
    root.appendChild(el);
  return el;
}
var context = {
  position: null,
  spaces: {}
};
function defineName(id = UnifiedOverlayProviderID, auto = true) {
  if (!context.spaces[id])
    context.spaces[id] = 0;
  if (auto)
    return `${id}--${++context.spaces[id]}`;
  return id;
}
function getIndex(id = UnifiedOverlayProviderID) {
  return context.spaces[id] || 0;
}
function createDeferred() {
  let resolve, reject;
  const promise = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
  });
  promise.resolve = (v) => {
    resolve(v);
    return promise;
  };
  promise.reject = reject;
  return promise;
}
function watchClickPosition() {
  if (typeof window === "undefined" && typeof document === "undefined")
    return;
  document.addEventListener("click", (event) => {
    if (event.target instanceof Element) {
      const { left, top, width, height } = event.target.getBoundingClientRect();
      if (left > 0 || top > 0) {
        context.position = { x: left + width / 2, y: top + height / 2 };
      } else {
        context.position = null;
      }
    } else {
      context.position = null;
    }
    setTimeout(() => context.position = null, 64);
  });
}
function createConstructor(mount) {
  function define2(instance, options) {
    function executor(props, options2) {
      const deferred = createDeferred();
      const name = defineName(options2.id, options2.autoIncrement);
      const index = getIndex(options2.id);
      const container = defineGlobalElement(name, options2.root);
      mount(instance, props, Object.assign(options2, {
        position: context.position,
        id: name,
        deferred,
        index,
        container
      }));
      return deferred;
    }
    let inst;
    function only(props, options2) {
      if (!inst) {
        inst = executor(props, options2);
        inst.finally(() => inst = void 0);
      }
      return inst;
    }
    function caller(props, overrides) {
      const opts = { ...options, ...overrides };
      return opts.only ? only(props, opts) : executor(props, opts);
    }
    return caller;
  }
  function render(instance, props, options) {
    return define2(instance, options)(props);
  }
  return { define: define2, render };
}
watchClickPosition();
function noop() {
}
function delay(milliseconds) {
  return new Promise((resolve) => setTimeout(resolve, milliseconds));
}

// node_modules/.pnpm/@overlastic+vue@0.4.7_typescript@5.5.3/node_modules/@overlastic/vue/dist/index.js
import { ref } from "vue-demi";
import { Teleport, defineComponent, h, provide as provide2, ref as ref2 } from "vue-demi";

// node_modules/.pnpm/no-case@4.0.0/node_modules/no-case/dist/index.js
var SPLIT_LOWER_UPPER_RE = new RegExp("([\\p{Ll}\\d])(\\p{Lu})", "gu");
var SPLIT_UPPER_UPPER_RE = new RegExp("(\\p{Lu})([\\p{Lu}][\\p{Ll}])", "gu");
var SPLIT_NUMBER_LOWER_RE = new RegExp("(\\d)(\\p{Ll})", "gu");
var SPLIT_LETTER_NUMBER_RE = new RegExp("(\\p{L})(\\d)", "gu");
var DEFAULT_STRIP_REGEXP = /[^\p{L}\d]+/giu;
var SPLIT_REPLACE_VALUE = "$1\0$2";
function split(input, options = {}) {
  let result = input.replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE).replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE);
  if (options.separateNumbers) {
    result = result.replace(SPLIT_NUMBER_LOWER_RE, SPLIT_REPLACE_VALUE).replace(SPLIT_LETTER_NUMBER_RE, SPLIT_REPLACE_VALUE);
  }
  result = result.replace(DEFAULT_STRIP_REGEXP, "\0");
  let start = 0;
  let end = result.length;
  while (result.charAt(start) === "\0")
    start++;
  if (start === end)
    return [];
  while (result.charAt(end - 1) === "\0")
    end--;
  return result.slice(start, end).split(/\0/g);
}
function toLower(locale) {
  return locale === false ? (input) => input.toLowerCase() : (input) => input.toLocaleLowerCase(locale);
}
function toUpper(locale) {
  return locale === false ? (input) => input.toUpperCase() : (input) => input.toLocaleUpperCase(locale);
}

// node_modules/.pnpm/pascal-case@4.0.0/node_modules/pascal-case/dist/index.js
function pascalCase(input, options) {
  const lower = toLower(options == null ? void 0 : options.locale);
  const upper = toUpper(options == null ? void 0 : options.locale);
  return split(input, options).map((word, index) => {
    const char0 = word[0];
    const initial = index > 0 && char0 >= "0" && char0 <= "9" ? "_" + char0 : upper(char0);
    return initial + lower(word.slice(1));
  }).join("");
}

// node_modules/.pnpm/@overlastic+vue@0.4.7_typescript@5.5.3/node_modules/@overlastic/vue/dist/index.js
import { defineComponent as defineComponent2, h as h2, inject as inject2, provide as provide3 } from "vue";
import { createApp, defineComponent as defineComponent3, h as h3, provide as provide4 } from "vue-demi";
import { Fragment, defineComponent as defineComponent4, getCurrentInstance as getCurrentInstance2, h as h4, provide as provide5, ref as ref3 } from "vue-demi";
var context2 = {
  appContext: null
};
var ScriptsInjectionKey = Symbol("OverlayScripts");
var InstancesInjectionKey = Symbol("OverlayInstances");
function usePrograms(options = {}) {
  const { duration = 0, immediate = true, model = "visible", automatic = true } = options;
  const overlay = inject(ScriptsInjectionKey, useDeclarative(model, options));
  const dec = Reflect.get(overlay, "in_dec");
  const { visible, deferred, vanish } = overlay;
  async function destroy() {
    visible.value = false;
    await delay(duration);
    vanish == null ? void 0 : vanish();
    return Promise.resolve();
  }
  if (!dec && automatic)
    deferred == null ? void 0 : deferred.then(destroy).catch(destroy);
  if (!dec && immediate)
    onMounted(() => visible.value = true);
  provide(ScriptsInjectionKey, null);
  return overlay;
}
function useDeclarative(model, options = {}) {
  const { reject = "reject", resolve = "resolve" } = options.events || {};
  const instance = getCurrentInstance();
  if (!instance)
    throw new Error("Please use usePrograms in component setup");
  const visible = useVModel(instance.props, model, instance.emit, { passive: true });
  const _reject = (value) => {
    instance == null ? void 0 : instance.emit(reject, value);
    visible.value = false;
  };
  const _resolve = (value) => {
    instance == null ? void 0 : instance.emit(resolve, value);
    visible.value = false;
  };
  return {
    reject: _reject,
    resolve: _resolve,
    vanish: noop,
    visible,
    in_dec: true
  };
}
function useScripts(options) {
  const { reject: _reject } = options.deferred || {};
  const { vanish: _vanish } = options;
  const visible = ref(false);
  function vanish() {
    _vanish == null ? void 0 : _vanish();
    _reject == null ? void 0 : _reject();
  }
  return {
    resolve: options.deferred.resolve,
    reject: options.deferred.reject,
    deferred: options.deferred,
    visible,
    vanish
  };
}
function useOverlayHolder(component, options = {}) {
  const { callback, scripts, props, refresh } = useRefreshMetadata();
  const name = defineName(options.id, options.autoIncrement);
  function render() {
    return h(
      Teleport,
      { to: options.root || document.body, disabled: options.root === false },
      h("div", { id: name }, [h(component, props.value)])
    );
  }
  const Holder = defineComponent({
    name: pascalCase(name),
    setup() {
      provide2(ScriptsInjectionKey, scripts);
      return () => refresh.value ? render() : null;
    }
  });
  return [Holder, callback];
}
function useRefreshMetadata() {
  const visible = ref2(false);
  const refresh = ref2(false);
  const props = ref2();
  const scripts = { vanish, visible };
  function vanish() {
    refresh.value = false;
    props.value = {};
    scripts.reject();
  }
  function callback(_props) {
    scripts.deferred = createDeferred();
    scripts.resolve = scripts.deferred.resolve;
    scripts.reject = scripts.deferred.reject;
    props.value = _props;
    refresh.value = true;
    return scripts.deferred;
  }
  return { callback, scripts, props, refresh };
}
var { define } = createConstructor((Instance, props, options) => {
  const { container, id, deferred, render, vanish: _vanish } = options;
  const InstanceWithProvider = defineComponent2({
    name: pascalCase(id),
    setup: () => {
      const scripts = useScripts({ vanish, deferred });
      provide3(ScriptsInjectionKey, scripts);
    },
    render: () => h2(Instance, props)
  });
  function vanish() {
    _vanish(InstanceWithProvider);
    container.remove();
  }
  render(Instance, props);
});
function useOverlay(Instance) {
  const { render, vanish } = inject2(InstancesInjectionKey);
  return define(Instance, { render, vanish });
}
function inheritParent(app, appContext) {
  var _a;
  const parent = (appContext == null ? void 0 : appContext.app) || ((_a = context2.appContext) == null ? void 0 : _a.app);
  if (parent) {
    app.config.globalProperties = parent.config.globalProperties;
    Object.assign(app._context, parent._context);
  }
}
var constructor = createConstructor((Instance, props, options) => {
  const { container, id, deferred, appContext } = options;
  function vanish() {
    app.unmount();
    container.remove();
  }
  const InstanceWithProvider = defineComponent3({
    name: pascalCase(id),
    setup: () => {
      const scripts = useScripts({
        vanish,
        deferred
      });
      provide4(ScriptsInjectionKey, scripts);
    },
    render: () => h3(Instance, props)
  });
  const app = createApp(InstanceWithProvider);
  inheritParent(app, appContext);
  app.mount(container);
  return vanish;
});
var defineOverlay = constructor.define;
var renderOverlay = constructor.render;
var Provider = defineComponent4({
  setup(_, { slots }) {
    const { appContext } = getCurrentInstance2();
    context2.appContext = appContext;
    return () => {
      var _a;
      return (_a = slots.default) == null ? void 0 : _a.call(slots);
    };
  }
});
var Field = defineComponent4({
  name: "Field",
  props: {
    is: {
      type: [String, Number, Object],
      default: ""
    }
  },
  setup(props) {
    return () => {
      if (typeof props.is === "string" || typeof props.is === "number")
        return props.is;
      return props.is ? h4(props.is) : null;
    };
  }
});
var OverlaysProvider = defineComponent4({
  setup(_, { slots }) {
    const instances = ref3([]);
    function render(Instance, props) {
      instances.value.push({ Instance, props });
    }
    function vanish(instance) {
      instances.value = instances.value.filter(({ Instance }) => Instance === instance);
    }
    provide5(InstancesInjectionKey, { render, vanish });
    return () => {
      var _a;
      return h4(Fragment, [
        ...instances.value.map(({ Instance, props }, index) => h4(Instance, { ...props, key: index })),
        (_a = slots.default) == null ? void 0 : _a.call(slots)
      ]);
    };
  }
});
function install(app) {
  context2.appContext = app._context;
}
var unoverlay = { install };
var src_default = unoverlay;
export {
  Field,
  OverlaysProvider,
  Provider,
  src_default as default,
  defineOverlay,
  install,
  renderOverlay,
  useOverlay,
  useOverlayHolder,
  usePrograms
};
//# sourceMappingURL=@overlastic_vue.js.map
